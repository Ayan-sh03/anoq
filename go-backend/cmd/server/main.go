package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/ayan-sh03/anoq/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/ayan-sh03/anoq/internal/config"
	"github.com/ayan-sh03/anoq/internal/db"
	"github.com/ayan-sh03/anoq/internal/handler"
	"github.com/ayan-sh03/anoq/internal/middleware"
	"github.com/ayan-sh03/anoq/internal/repository"
)

// @title           AnoQ Backend API
// @version         1.0
// @description     A comprehensive anonymous form builder and response collection system
// @termsOfService  http://swagger.io/terms/

// @contact.name   AnoQ Support
// @contact.email  support@anoq.com

// @license.name  MIT
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

// @securityDefinitions.apikey SessionToken
// @in header
// @name X-Session-Token
// @description Session token for authentication

func main() {
	// Initialize logger
	zerolog.TimeFieldFormat = zerolog.TimeFormatUnix
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stdout})

	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to load configuration")
	}

	// Set log level
	if cfg.IsDevelopment() {
		zerolog.SetGlobalLevel(zerolog.DebugLevel)
		gin.SetMode(gin.DebugMode)
	} else {
		zerolog.SetGlobalLevel(zerolog.InfoLevel)
		gin.SetMode(gin.ReleaseMode)
	}

	log.Info().
		Str("environment", cfg.App.Environment).
		Str("version", cfg.App.Version).
		Msg("Starting AnoQ Backend Server")

	// Initialize database connection with new approach
	dbConfig := db.Config{
		Host:     cfg.Database.Host,
		Port:     fmt.Sprintf("%d", cfg.Database.Port),
		User:     cfg.Database.User,
		Password: cfg.Database.Password,
		Database: cfg.Database.Name,
		SSLMode:  cfg.Database.SSLMode,
	}

	database, err := db.New(dbConfig)
	if err != nil {
		log.Fatal().Err(err).Msg("Failed to connect to database")
	}
	defer database.Close()

	// Initialize repositories
	userRepo := repository.NewUserRepository(database)
	formRepo := repository.NewFormRepository(database)
	questionRepo := repository.NewQuestionRepository(database)
	responseRepo := repository.NewResponseRepository(database)

	// Initialize handlers with new constructors
	userHandler := handler.NewUserHandler(userRepo)
	formHandler := handler.NewFormHandler(formRepo, responseRepo)
	questionHandler := handler.NewQuestionHandler(questionRepo, formRepo)
	responseHandler := handler.NewResponseHandler(responseRepo, formRepo, questionRepo)
	healthHandler := handler.NewHealthHandler(database)

	// Setup router
	router := setupRouter(cfg, userHandler, formHandler, questionHandler, responseHandler, healthHandler, userRepo)

	// Setup server
	server := &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		IdleTimeout:  cfg.Server.IdleTimeout,
	}

	// Start server in a goroutine
	go func() {
		log.Info().
			Int("port", cfg.Server.Port).
			Msg("Server starting")

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal().Err(err).Msg("Failed to start server")
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Info().Msg("Shutting down server...")

	// Graceful shutdown with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatal().Err(err).Msg("Server forced to shutdown")
	}

	log.Info().Msg("Server exited")
}

func setupRouter(
	cfg *config.Config,
	userHandler *handler.UserHandler,
	formHandler *handler.FormHandler,
	questionHandler *handler.QuestionHandler,
	responseHandler *handler.ResponseHandler,
	healthHandler *handler.HealthHandler,
	userRepo *repository.UserRepository,
) *gin.Engine {
	router := gin.New()

	// Middleware
	router.Use(gin.LoggerWithWriter(log.Logger))
	router.Use(gin.Recovery())
	router.Use(middleware.RequestID())
	router.Use(middleware.Logger())

	// CORS configuration
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowOrigins = []string{"http://localhost:3000", "https://anoq.vercel.app"}
	corsConfig.AllowMethods = []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"}
	corsConfig.AllowHeaders = []string{"Origin", "Content-Type", "Accept", "Authorization", "X-Request-ID"}
	corsConfig.ExposeHeaders = []string{"X-Request-ID"}
	corsConfig.AllowCredentials = true
	router.Use(cors.New(corsConfig))

	// Swagger documentation endpoint
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Health check endpoint
	router.GET("/health", healthHandler.Health)
	router.GET("/ready", healthHandler.Ready)

	// API routes
	api := router.Group("/api")
	{
		// Rate limiting for all API routes
		api.Use(middleware.RateLimit(cfg.App.Environment == "production"))

		// Authentication routes (public - no auth required)
		authRoutes := api.Group("/auth")
		{
			authRoutes.POST("/register", userHandler.Register)
			authRoutes.POST("/login", userHandler.Login)
			authRoutes.POST("/logout", middleware.Auth(cfg, userRepo), userHandler.Logout)
		}

		// User routes
		userRoutes := api.Group("/user")
		userRoutes.Use(middleware.Auth(cfg, userRepo))
		{
			userRoutes.GET("/", userHandler.GetUser)
			userRoutes.PUT("/", userHandler.UpdateUser)
		}

		// Form routes
		formRoutes := api.Group("/form")
		{
			// Public form routes (no auth required)
			formRoutes.GET("/slug/:slug", formHandler.GetFormBySlug)
		}

		// Protected form routes (require authentication)
		protectedFormRoutes := api.Group("/form")
		protectedFormRoutes.Use(middleware.Auth(cfg, userRepo))
		{
			protectedFormRoutes.GET("/", formHandler.ListForms)
			// protectedFormRoutes.GET("/:id", formHandler.GetForm)
			protectedFormRoutes.POST("/", formHandler.CreateForm)
			protectedFormRoutes.PUT("/:id", formHandler.UpdateForm)
			protectedFormRoutes.DELETE("/:id", formHandler.DeleteForm)
			protectedFormRoutes.POST("/open/:slug", formHandler.OpenForm)
			protectedFormRoutes.POST("/close/:slug", formHandler.CloseForm)
			protectedFormRoutes.GET("/submissions/:slug", formHandler.GetFormSubmissions)

			// Question routes within forms - using same :id parameter to avoid conflicts
			protectedFormRoutes.POST("/:id/questions", questionHandler.CreateQuestion)
			protectedFormRoutes.GET("/:id/questions", questionHandler.GetFormQuestions)
			protectedFormRoutes.POST("/:id/questions/batch", questionHandler.CreateMultipleQuestions)
			protectedFormRoutes.PUT("/:id/questions/reorder", questionHandler.ReorderQuestions)
		}

		// Question routes (standalone)
		questionRoutes := api.Group("/questions")
		questionRoutes.Use(middleware.Auth(cfg, userRepo))
		{
			questionRoutes.GET("/:id", questionHandler.GetQuestion)
			questionRoutes.PUT("/:id", questionHandler.UpdateQuestion)
			questionRoutes.DELETE("/:id", questionHandler.DeleteQuestion)
		}

		// Response routes (public for form submissions)
		api.POST("/response", middleware.FormRateLimit(), responseHandler.SubmitResponse)
		api.GET("/response/:id", middleware.Auth(cfg, userRepo), responseHandler.GetResponse)

		// Dashboard routes
		dashboard := api.Group("/dashboard")
		dashboard.Use(middleware.Auth(cfg, userRepo))
		{
			dashboard.GET("/", formHandler.GetDashboard)
			dashboard.GET("/stats", formHandler.GetStats)
		}
	}

	return router
}
