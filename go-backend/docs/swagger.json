{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive anonymous form builder and response collection system",
        "title": "AnoQ Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "AnoQ Support",
            "email": "support@anoq.com"
        },
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/model.User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invalidate user session and logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No active session",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Create a new user account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "family_name": {
                                    "type": "string"
                                },
                                "given_name": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/model.User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User with this email already exists",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/form": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a list of forms created by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "List user's forms",
                "responses": {
                    "200": {
                        "description": "List of forms",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "forms": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/model.Form"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new form with title, description, and slug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Create a new form",
                "parameters": [
                    {
                        "description": "Form creation data",
                        "name": "form",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateFormRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Form created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "form": {
                                    "$ref": "#/definitions/model.Form"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Form with this slug already exists",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/form/slug/{slug}": {
            "get": {
                "description": "Get a form by its slug identifier (public endpoint)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Get form by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Form slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "form": {
                                    "$ref": "#/definitions/model.Form"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/form/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing form's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Update a form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Form update data",
                        "name": "form",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateFormRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "form": {
                                    "$ref": "#/definitions/model.Form"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or form ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied: you don't own this form",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an existing form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Delete a form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/form/{id}/questions": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new question to an existing form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Create a question for a form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Question data",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Question created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "question": {
                                    "$ref": "#/definitions/model.QuestionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or form ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied: you don't own this form",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/questions/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get details of a specific question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Get a question by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "question": {
                                    "$ref": "#/definitions/model.QuestionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid question ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied: you don't own this form",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/response": {
            "post": {
                "description": "Submit answers to a form (public endpoint)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Responses"
                ],
                "summary": "Submit a form response",
                "parameters": [
                    {
                        "description": "Form response data",
                        "name": "response",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateResponseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response submitted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "response_id": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or form not accepting responses",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/response/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get details of a specific form response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Responses"
                ],
                "summary": "Get a response by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Response ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "response": {
                                    "$ref": "#/definitions/model.ResponseDetailResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid response ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Response not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get current authenticated user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/model.User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update current authenticated user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update current user",
                "parameters": [
                    {
                        "description": "User update data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/model.User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the service is running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "service": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Check if the service is ready to receive traffic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "service": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service not ready",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AnswerResponse": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "question": {
                    "$ref": "#/definitions/model.QuestionResponse"
                },
                "question_id": {
                    "type": "string"
                },
                "selected_choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.CreateAnswerRequest": {
            "description": "Request payload for submitting an answer to a question",
            "type": "object",
            "required": [
                "question_id"
            ],
            "properties": {
                "answer": {
                    "description": "Answer text for basic questions",
                    "type": "string",
                    "example": "Very satisfied"
                },
                "question_id": {
                    "description": "Question ID being answered (required)",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440003"
                },
                "selected_choices": {
                    "description": "Selected choices for multiple_choice questions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Very satisfied\"]"
                    ]
                }
            }
        },
        "model.CreateFormRequest": {
            "description": "Request payload for creating a new form",
            "type": "object",
            "required": [
                "slug",
                "title"
            ],
            "properties": {
                "description": {
                    "description": "Form description",
                    "type": "string",
                    "example": "A form to collect customer feedback"
                },
                "questions": {
                    "description": "Optional list of questions to create with the form",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CreateQuestionRequest"
                    }
                },
                "slug": {
                    "description": "URL-friendly identifier (required)",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "customer-feedback-2023"
                },
                "title": {
                    "description": "Form title (required)",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Customer Feedback Form"
                }
            }
        },
        "model.CreateQuestionRequest": {
            "description": "Request payload for creating a new question",
            "type": "object",
            "required": [
                "question_text",
                "type"
            ],
            "properties": {
                "allow_multiple": {
                    "description": "Allow multiple selections for multiple_choice questions",
                    "type": "boolean",
                    "example": false
                },
                "choices": {
                    "description": "Choices for multiple_choice questions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Very satisfied\"",
                        " \"Satisfied\"",
                        " \"Neutral\"]"
                    ]
                },
                "position": {
                    "description": "Position in form (optional, auto-assigned if not provided)",
                    "type": "integer",
                    "example": 1
                },
                "question_text": {
                    "description": "Question text (required)",
                    "type": "string",
                    "example": "How satisfied are you with our service?"
                },
                "required": {
                    "description": "Whether question is required",
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "description": "Question type: basic or multiple_choice (required)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.QuestionType"
                        }
                    ],
                    "example": "multiple_choice"
                }
            }
        },
        "model.CreateResponseRequest": {
            "description": "Request payload for submitting a form response",
            "type": "object",
            "required": [
                "answers",
                "form_id"
            ],
            "properties": {
                "answers": {
                    "description": "List of answers to form questions (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CreateAnswerRequest"
                    }
                },
                "email": {
                    "description": "Optional respondent email",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "form_id": {
                    "description": "Form ID to submit response for (required)",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "name": {
                    "description": "Optional respondent name",
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "model.Form": {
            "description": "Form structure containing all form details",
            "type": "object",
            "required": [
                "slug",
                "title"
            ],
            "properties": {
                "author": {
                    "description": "Form author details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "author_id": {
                    "description": "Form creator's user ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "created_at": {
                    "description": "Form creation timestamp",
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "description": {
                    "description": "Form description",
                    "type": "string",
                    "example": "A form to collect customer feedback"
                },
                "id": {
                    "description": "Form unique identifier",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "modified_at": {
                    "description": "Last modification timestamp",
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "questions": {
                    "description": "List of questions in the form",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Question"
                    }
                },
                "slug": {
                    "description": "URL-friendly form identifier",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "customer-feedback-2023"
                },
                "status": {
                    "description": "Form status (open/closed)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.FormStatus"
                        }
                    ],
                    "example": "open"
                },
                "title": {
                    "description": "Form title",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Customer Feedback Form"
                }
            }
        },
        "model.FormResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/model.UserResponse"
                },
                "author_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QuestionResponse"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.FormStatus"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.FormStatus": {
            "type": "string",
            "enum": [
                "open",
                "closed"
            ],
            "x-enum-varnames": [
                "FormStatusOpen",
                "FormStatusClosed"
            ]
        },
        "model.Question": {
            "description": "Question structure containing question details and response options",
            "type": "object",
            "required": [
                "question_text"
            ],
            "properties": {
                "allow_multiple": {
                    "description": "Whether multiple selections are allowed",
                    "type": "boolean",
                    "example": false
                },
                "answer": {
                    "description": "Answer for basic questions",
                    "type": "string",
                    "example": "Very satisfied"
                },
                "choices": {
                    "description": "Multiple choice specific fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Very satisfied\"",
                        " \"Satisfied\"",
                        " \"Neutral\"",
                        " \"Dissatisfied\"",
                        " \"Very dissatisfied\"]"
                    ]
                },
                "created_at": {
                    "description": "Question creation timestamp",
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "form_id": {
                    "description": "Associated form ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "id": {
                    "description": "Question unique identifier",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440003"
                },
                "position": {
                    "description": "Question position in form",
                    "type": "integer",
                    "example": 1
                },
                "question_text": {
                    "description": "Question text content",
                    "type": "string",
                    "example": "How satisfied are you with our service?"
                },
                "required": {
                    "description": "Whether question is required",
                    "type": "boolean",
                    "example": true
                },
                "selected_choice": {
                    "description": "Selected choices",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Very satisfied\"]"
                    ]
                },
                "type": {
                    "description": "Question type (basic/multiple_choice)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.QuestionType"
                        }
                    ],
                    "example": "multiple_choice"
                }
            }
        },
        "model.QuestionResponse": {
            "type": "object",
            "properties": {
                "allow_multiple": {
                    "type": "boolean"
                },
                "answer": {
                    "type": "string"
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "form_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "question_text": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "selected_choice": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/model.QuestionType"
                }
            }
        },
        "model.QuestionType": {
            "type": "string",
            "enum": [
                "basic",
                "multiple_choice"
            ],
            "x-enum-varnames": [
                "QuestionTypeBasic",
                "QuestionTypeMultipleChoice"
            ]
        },
        "model.ResponseDetailResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AnswerResponse"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "form": {
                    "$ref": "#/definitions/model.FormResponse"
                },
                "form_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_ip": {
                    "type": "string"
                }
            }
        },
        "model.UpdateFormRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UpdateQuestionRequest"
                    }
                },
                "status": {
                    "$ref": "#/definitions/model.FormStatus"
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "model.UpdateQuestionRequest": {
            "type": "object",
            "properties": {
                "allow_multiple": {
                    "type": "boolean"
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "question_text": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/model.QuestionType"
                }
            }
        },
        "model.UpdateUserRequest": {
            "description": "Request payload for updating user information",
            "type": "object",
            "properties": {
                "family_name": {
                    "description": "Update family name",
                    "type": "string",
                    "example": "Doe"
                },
                "given_name": {
                    "description": "Update given name",
                    "type": "string",
                    "example": "John"
                },
                "username": {
                    "description": "Update username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "family_name": {
                    "description": "User's family name",
                    "type": "string",
                    "example": "Doe"
                },
                "given_name": {
                    "description": "User's given name",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "User unique identifier",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "username": {
                    "description": "User's chosen username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "given_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "SessionToken": {
            "description": "Session token for authentication",
            "type": "apiKey",
            "name": "X-Session-Token",
            "in": "header"
        }
    }
}